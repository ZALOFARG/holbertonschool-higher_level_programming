# Test Cases for matrix_divided function

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test Case 1: Basic Division
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test Case 2: Division by zero (raises ZeroDivisionError)
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/holbertonschool-higher_level_programming/python-test_driven_development/2-matrix_divided.py", line 30, in matrix_divided
    raise ZeroDivisionError("division by zero")
ZeroDivisionError: division by zero

# Test Case 3: Non-numeric div (raises TypeError)
>>> matrix_divided(matrix, "divisor")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/holbertonschool-higher_level_programming/python-test_driven_development/2-matrix_divided.py", line 28, in matrix_divided
    raise TypeError("div must be a number")
TypeError: div must be a number

# Test Case 4: Different row sizes (raises TypeError)
>>> matrix = [[1, 2, 3], [4, 5]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/holbertonschool-higher_level_programming/python-test_driven_development/2-matrix_divided.py", line 26, in matrix_divided
    raise TypeError("Each row of the matrix must have the same size")
TypeError: Each row of the matrix must have the same size

# Test Case 5: Non-numeric matrix (raises TypeError)
>>> matrix = [[1, 2, "three"], [4, 5]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/holbertonschool-higher_level_programming/python-test_driven_development/2-matrix_divided.py", line 24, in matrix_divided
    raise TypeError("matrix must be a matrix (list of lists) of integers/floats")
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test Case 6: Divisor is positive infinity
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, float('inf'))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

# Test Case 7: Divisor is negative infinity
>>> matrix_divided(matrix, -float('inf'))
[[-0.0, -0.0, -0.0], [-0.0, -0.0, -0.0]]

# Test Case 8: Missing one argument
>>> matrix_divided(matrix)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: matrix_divided() missing 1 required positional argument: 'div'

# Test Case 9: Missing two arguments
>>> matrix_divided()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
